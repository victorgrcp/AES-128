#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  2 15:04:19 2022

@author: victor
"""

import numpy as np

class AES:
    
    s_box = (
            0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    )
    
    
    def __init__(self, m, key):
        self.m = m
        self.c = ''
        self.key = np.array([hex(ord(c)) for c in key])
        self.state = np.array([hex(ord(c)) for c in m])
        self.keys = np.zeros((160))
        
    def expand_key(self):
        pass
    
    def add_round_key(self, nround):
        
        for i in range(16):
                self.state[i] = hex(int(self.state[i], 0) ^ int(self.keys[(nround*16) + i], 0))
        
    
    def sub_bytes(self):
        for i in range(16):
                self.state[i] = hex(self.s_box[ int(self.state[i], 0) ])

    
    def shift_rows(self):
        # Shift right the row i, i times, from i=1..n
        for i in range(1,4):
            self.state[i*4 : (1+i) * 4] = np.roll(self.state[i*4 : (1+i) * 4], i)
    
    def GMUL2(self, x: str):
        # Multiplicacion Galois por 2 
        b = int(x, 0)
        h = (b >> 7) & 1
        out = (b << 1) & 0xff # Haciendo un AND con 0xff, quitamos el bit que haya mÃ¡s a la izquierda del 8o bit
        out ^= h * 0x1b # XOR con 0 o 0x1B dependiendo si el bit mÃ¡s a la izquieda es 0 o 1
        return out
    
    def GMUL3(self, x: str):
        # La multiplicaciÃ³n x3 es simplemente Gmul2(x) XOR x
        return self.GMUL2(x) ^ int(x, 0)
    
    
    def mix_columns(self):
        
        for i in range(4):
            
            a1 = hex(self.GMUL2(self.state[i]) ^ self.GMUL3(self.state[4 + i]) ^ int(self.state[8 + i], 0) ^ int(self.state[12 + i], 0))
            a2 = hex(int(self.state[i], 0) ^ self.GMUL2(self.state[4 + i]) ^ self.GMUL3(self.state[8 + i]) ^ int(self.state[12 + i], 0))
            a3 = hex(int(self.state[i], 0) ^ int(self.state[4 + i], 0) ^ self.GMUL2(self.state[8 + i]) ^ self.GMUL3(self.state[12 + i]))
            a4 = hex(self.GMUL3(self.state[i]) ^ int(self.state[4 + i], 0) ^ int(self.state[8 + i], 0) ^ self.GMUL2(self.state[12 + i]))
                
            self.state[i]       = a1
            self.state[4 + i]   = a2
            self.state[8 + i]   = a3
            self.state[12 + i]  = a4
                  
    
    def decode_state(self):
        return
    
    def encrypt(self):
        
        self.expand_key()
        self.add_round_key(0)
        
        for i in range(1,9):
            self.sub_bytes()
            self.shift_rows()
            self.mix_columns()
            self.add_round_key(i)
        
        self.sub_bytes()
        self.shift_rows()
        self.add_round_key(9)
        
        return self.decode_state()